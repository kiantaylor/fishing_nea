[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://gxo2u0cg6b0i"]

[ext_resource type="Texture2D" uid="uid://7okp1oefxd5b" path="res://Textures/WaterDistortion.png" id="2"]
[ext_resource type="Texture2D" uid="uid://bbln12f651e6x" path="res://Textures/noiseTexture.png" id="2_a3amv"]

[sub_resource type="Shader" id="1"]
code = "/**
* Ported from the original unity shader by Erik Roystan Ross
* https://roystan.net/articles/toon-water.html
* https://github.com/IronWarrior/ToonWaterShader
* Camera Depth taken from Bastiaan Olij's video on: https://www.youtube.com/watch?v=Jq3he9Lbj7M
*/

shader_type spatial;

const float SMOOTHSTEP_AA = 0.01;
uniform sampler2D surfaceNoise;
uniform sampler2D distortNoise;
uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, filter_linear_mipmap;
render_mode specular_toon;
uniform float beer_factor = 1.0;

uniform float foam_distance = 0.01;
uniform float foam_max_distance = 0.8;
uniform float foam_min_distance = 0.4;
uniform vec4 foam_color: source_color  = vec4(1.0);

uniform vec2 surface_noise_tiling = vec2(1.0, 4.0);
uniform vec3 surface_noise_scroll = vec3(0.03, 0.03, 0.0);
uniform float surface_noise_cutoff: hint_range(0, 1) = 0.777;
uniform float surface_distortion_amount: hint_range(0, 1) = 0.27;

uniform vec4 _DepthGradientShallow: source_color = vec4(0.325, 0.807, 0.971, 0.725);
uniform vec4 _DepthGradientDeep: source_color = vec4(0.086, 0.407, 1, 0.749);
uniform float _DepthMaxDistance: hint_range(0, 2) = 1.0;
uniform float _DepthFactor = 1.0;
uniform float calmness: hint_range(1.0, 30.0) = 1.0;
varying vec2 noiseUV;
varying vec2 distortUV;
varying vec3 viewNormal;
varying float depth;
vec4 alphaBlend(vec4 top, vec4 bottom)
{
	vec3 color = (top.rgb * top.a) + (bottom.rgb * (1.0 - top.a));
	float alpha = top.a + bottom.a * (1.0 - top.a);
	
	return vec4(color, alpha);
}
float wave(vec2 position){
  position += texture(surfaceNoise, position / calmness).x * 2.0 - 1.0;
  vec2 wv = 1.0 - abs(sin(position));
  return pow(1.0 - pow(wv.x * wv.y, 0.65), 4.0);
}
float height(vec2 position,float time) {
	float d = wave((position + time) * 0.4) * 0.3;
  	d += wave((position - time) * 0.30) * 0.3;
  	d += wave((position + time) * 0.50) * 0.2;
  	d += wave((position - time) * 0.50) * 0.2;
  return d;
}
void vertex() {

	viewNormal = (MODELVIEW_MATRIX * vec4(NORMAL, 0.0)).xyz;
	noiseUV = UV * surface_noise_tiling*10.0;
	distortUV = UV;
	
	vec2 pos = VERTEX.xz;
	float k = height(pos, TIME);
	VERTEX.y = k;
	NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));

}

void fragment(){
	// https://www.youtube.com/watch?v=Jq3he9Lbj7M
	float depthVal = texture(DEPTH_TEXTURE, SCREEN_UV).r;
	depth = PROJECTION_MATRIX[3][2] / (depthVal + PROJECTION_MATRIX[2][2]);
	depth = depth + VERTEX.z;
	depth = exp(-depth * beer_factor*0.02);
	depth = 1.0 - depth;
	
	// Still unsure how to get properly the NORMAL from the camera
	// This was generated by ChatGPT xD
    vec4 view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, depthVal, 1.0);
    view_pos /= view_pos.w;
    vec3 existingNormal = normalize(cross( dFdx(view_pos.xyz), dFdy(view_pos.xyz)));

	float normalDot = clamp(dot(existingNormal.xyz, viewNormal), 0.0, 1.0);
	float foamDistance = mix(foam_max_distance, foam_min_distance, normalDot);
	
	float foamDepth = clamp(depth / foamDistance, 0.0, 1.0);
	float surfaceNoiseCutoff = foamDepth * surface_noise_cutoff;
	
	vec4 distortNoiseSample = texture(distortNoise, distortUV);
	vec2 distortAmount = (distortNoiseSample.xy * 2.0 -1.0) * surface_distortion_amount;
	
	vec2 noise_uv = vec2(
		(noiseUV.x + TIME * surface_noise_scroll.x) + distortAmount.x , 
		(noiseUV.y + TIME * surface_noise_scroll.y + distortAmount.y)
	);
	float surfaceNoiseSample = texture(surfaceNoise, noise_uv).r;
	float surfaceNoiseAmount = smoothstep(surfaceNoiseCutoff - SMOOTHSTEP_AA, surfaceNoiseCutoff + SMOOTHSTEP_AA, surfaceNoiseSample);
	
	float waterDepth = clamp(depth / _DepthMaxDistance*1.0, 0.0, 3.0) * 1.0;
	vec4 waterColor = mix(_DepthGradientShallow, _DepthGradientDeep, waterDepth);

	vec4 surfaceNoiseColor = foam_color;
    surfaceNoiseColor.a *= surfaceNoiseAmount;
	vec4 color = alphaBlend(surfaceNoiseColor, waterColor);
	
    ALBEDO = color.rgb;
	ALPHA = color.a;
	ROUGHNESS=0.0;
	RIM=0.2;
	METALLIC=0.0;
	
}
"

[resource]
render_priority = 0
shader = SubResource("1")
shader_parameter/beer_factor = 0.8
shader_parameter/foam_distance = 0.01
shader_parameter/foam_max_distance = 0.8
shader_parameter/foam_min_distance = 0.4
shader_parameter/foam_color = Color(0.956863, 0.921569, 0.87451, 0.827451)
shader_parameter/surface_noise_tiling = Vector2(1, 4)
shader_parameter/surface_noise_scroll = Vector3(0.03, 0.03, 0)
shader_parameter/surface_noise_cutoff = 1.0
shader_parameter/surface_distortion_amount = 1.0
shader_parameter/_DepthGradientShallow = Color(0.0705882, 0.588235, 0.827451, 0.345098)
shader_parameter/_DepthGradientDeep = Color(0.0588235, 0.352941, 0.541176, 0.937255)
shader_parameter/_DepthMaxDistance = 1.0
shader_parameter/_DepthFactor = 1.0
shader_parameter/calmness = 15.0
shader_parameter/surfaceNoise = ExtResource("2_a3amv")
shader_parameter/distortNoise = ExtResource("2")
